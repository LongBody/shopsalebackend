#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var axios_1 = __importDefault(require("axios"));
var constants_1 = require("../util/constants");
var AwakeService = /** @class */ (function () {
    function AwakeService() {
        var _this = this;
        this.listApp = [];
        setInterval(function () {
            _this.listApp.forEach(function (app) {
                if (app.lastHeartBeat && Date.now() - app.lastHeartBeat >= constants_1.DEFAULT_HEARTBEAT) {
                    _this.awake(app);
                    app.lastHeartBeat = Date.now();
                }
            });
        }, constants_1.INTERVAL);
    }
    AwakeService.prototype.add = function (newApp) {
        this.listApp.push(Object.assign(newApp, {
            id: this.listApp.length,
            lastHeartBeat: Date.now()
        }));
    };
    AwakeService.prototype.remove = function (id) {
        this.listApp = this.listApp.filter(function (app) { return app.id !== id; });
    };
    AwakeService.prototype.show = function (id) {
        var currentApp = this.listApp.filter(function (app) { return app.id === id; });
        return currentApp.length > 0 ? currentApp[0] : undefined;
    };
    AwakeService.prototype.showAll = function () {
        return this.listApp;
    };
    AwakeService.prototype.awake = function (app) {
        console.info("Awake : " + app.url);
        axios_1.default.get(app.url).then(function (err) {
            if (err) {
                console.log(err);
            }
        });
    };
    return AwakeService;
}());
exports.default = new AwakeService();
